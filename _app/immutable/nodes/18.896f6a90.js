import{s as xn,f as i,a as p,g as o,h as T,N as r,c as d,d as f,j as m,i as K,u as a,v as ln,H as _n,x as $n}from"../chunks/scheduler.b261eb3c.js";import{S as Tn,i as Cn,b as J,d as O,m as z,a as B,t as R,e as N}from"../chunks/index.5ccb46b4.js";import{P as Pn}from"../chunks/post.d159e0b7.js";import"../chunks/image_banner.b83a1e67.js";import{C as wn}from"../chunks/code_copy.79980bc7.js";import{I as Sn}from"../chunks/info_box.1f925e92.js";function Hn(k){let n,t=`This post aims to provoke critical thinking and discussion rather than assert absolute truths.
The intention here is to challenge conventional perspectives and encourage deeper exploration of the language.`;return{c(){n=i("p"),n.textContent=t},l(e){n=o(e,"P",{"data-svelte-h":!0}),r(n)!=="svelte-f80kmv"&&(n.textContent=t)},m(e,v){K(e,n,v)},p:ln,d(e){e&&f(n)}}}function Ln(k){let n,t,e,v=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  <span class="token keyword">return</span> user<span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">const</span> exampleUser<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  name<span class="token operator">:</span> <span class="token string">'Jhon Doe'</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  age<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  email<span class="token operator">:</span> <span class="token string">'jhon.doe@example.com'</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// Although not ideal, TypeScript doesn't raise an error</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// because exampleUser satisfies the structure expected by getUser</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token function">getUser</span><span class="token punctuation">(</span>exampleUser<span class="token punctuation">)</span><span class="token punctuation">;</span></div></div>`+"";return{c(){n=i("pre"),t=i("code"),e=new _n(!1),this.h()},l(l){n=o(l,"PRE",{});var u=T(n);t=o(u,"CODE",{class:!0});var b=T(t);e=$n(b,!1),b.forEach(f),u.forEach(f),this.h()},h(){e.a=null,m(t,"class","language-ts")},m(l,u){K(l,n,u),a(n,t),e.m(v,t)},p:ln,d(l){l&&f(n)}}}function Mn(k){let n,t,e,v=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// Define symbols for nominal typing</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">const</span> CustomerProfileSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'CustomerProfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">const</span> AdminProfileSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'AdminProfile'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// Define types using symbols</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">type</span> <span class="token class-name">CustomerProfile</span> <span class="token operator">=</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  type<span class="token operator">:</span> <span class="token keyword">typeof</span> CustomerProfileSymbol<span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">type</span> <span class="token class-name">AdminProfile</span> <span class="token operator">=</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  type<span class="token operator">:</span> <span class="token keyword">typeof</span> AdminProfileSymbol<span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// Function to check if a profile is an admin profile</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">function</span> <span class="token function">isAdminProfile</span><span class="token punctuation">(</span>profile<span class="token operator">:</span> CustomerProfile <span class="token operator">|</span> AdminProfile<span class="token punctuation">)</span><span class="token operator">:</span> profile <span class="token keyword">is</span> AdminProfile <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  <span class="token keyword">return</span> profile<span class="token punctuation">.</span>type <span class="token operator">===</span> AdminProfileSymbol<span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// Example usage</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">const</span> customer<span class="token operator">:</span> CustomerProfile <span class="token operator">=</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  type<span class="token operator">:</span> CustomerProfileSymbol<span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  email<span class="token operator">:</span> <span class="token string">'alice@example.com'</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">const</span> admin<span class="token operator">:</span> AdminProfile <span class="token operator">=</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  type<span class="token operator">:</span> AdminProfileSymbol<span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  name<span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  email<span class="token operator">:</span> <span class="token string">'bob@example.com'</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// TypeScript will catch this assignment as an error</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// because of the nominal typing with symbols</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// const invalidAssignment: AdminProfile = customer;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment">// Check if a profile is an admin profile</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAdminProfile</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">&#36;{</span>admin<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is an admin.</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">&#36;{</span>admin<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is a customer.</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token punctuation">}</span></div></div>`+"";return{c(){n=i("pre"),t=i("code"),e=new _n(!1),this.h()},l(l){n=o(l,"PRE",{});var u=T(n);t=o(u,"CODE",{class:!0});var b=T(t);e=$n(b,!1),b.forEach(f),u.forEach(f),this.h()},h(){e.a=null,m(t,"class","language-ts")},m(l,u){K(l,n,u),a(n,t),e.m(v,t)},p:ln,d(l){l&&f(n)}}}function An(k){let n,t,e='<a href="#enhancing-javascript-with-static-typing">Enhancing JavaScript with Static Typing</a>',v,l,u=`TypeScript stands as a superset of JavaScript, encompassing all its features while extending its capabilities with additional functionalities.
It empowers developers with the ability to specify types, adding a layer of static typing to JavaScript projects.`,b,C,cn=`However, it's essential to note that TypeScript doesn't directly execute in production environments.
Instead, it undergoes transpilation into JavaScript before execution.
This transformation process ensures compatibility with all JavaScript environments, as browsers and most platforms don't inherently support TypeScript.`,Q,h,V,P,pn=`Before delving into the matter, it's crucial to clarify what we mean by "programming language":`,F,S,dn="<p>A programming language is a system of notation for writing computer programs. Programming languages are described in terms of their syntax (form) and semantics (meaning), usually defined by a formal language.</p>",G,w,rn='<a href="#duck-typing-and-structural-typing">Duck Typing and Structural Typing</a>',W,H,vn=`In TypeScript, types aren&#39;t confined to unique labels; they primarily describe the shape of objects.
This approach, known as <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="external">duck typing</a>, determines an object&#39;s type based on its structure.
As the adage goes:`,X,L,un="<p>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.</p>",Y,_,fn='<a href="#example">Example</a>',Z,M,g,nn,$,mn='<a href="#nominal-typing-with-symbols">Nominal Typing with Symbols</a>',sn,A,kn=`To implement nominal typing in TypeScript, developers can leverage <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol" rel="external">symbols</a>.
Symbols serve as unique identifiers, allowing for the distinction between different types by associating them with specific symbols.`,an,E,bn=`By "tagging" types with symbols, developers can enforce nominal typing, ensuring that types with identical structures remain distinct entities.
This approach becomes particularly useful when there's a need to differentiate between similar types with the same structure.`,en,j,hn=`Consider the scenario where we have two types, <code class="inline-code-block">CustomerProfile</code> and <code class="inline-code-block">AdminProfile</code>, sharing identical structures but serving different purposes.
Through nominal typing with symbols, TypeScript prevents unintended assignments between these types, maintaining type safety and clarity within the codebase.`,tn,x,gn='<a href="#example">Example</a>',on,U,y,I;return h=new Sn({props:{statusType:"info",statusName:"Disclaimer ❕",$$slots:{default:[Hn]},$$scope:{ctx:k}}}),g=new wn({props:{$$slots:{default:[Ln]},$$scope:{ctx:k}}}),y=new wn({props:{$$slots:{default:[Mn]},$$scope:{ctx:k}}}),{c(){n=i("article"),t=i("h2"),t.innerHTML=e,v=p(),l=i("p"),l.textContent=u,b=p(),C=i("p"),C.textContent=cn,Q=p(),J(h.$$.fragment),V=p(),P=i("p"),P.textContent=pn,F=p(),S=i("blockquote"),S.innerHTML=dn,G=p(),w=i("h2"),w.innerHTML=rn,W=p(),H=i("p"),H.innerHTML=vn,X=p(),L=i("blockquote"),L.innerHTML=un,Y=p(),_=i("h3"),_.innerHTML=fn,Z=p(),M=i("div"),J(g.$$.fragment),nn=p(),$=i("h2"),$.innerHTML=mn,sn=p(),A=i("p"),A.innerHTML=kn,an=p(),E=i("p"),E.textContent=bn,en=p(),j=i("p"),j.innerHTML=hn,tn=p(),x=i("h3"),x.innerHTML=gn,on=p(),U=i("div"),J(y.$$.fragment),this.h()},l(c){n=o(c,"ARTICLE",{slot:!0});var s=T(n);t=o(s,"H2",{id:!0,"data-svelte-h":!0}),r(t)!=="svelte-e46dqh"&&(t.innerHTML=e),v=d(s),l=o(s,"P",{"data-svelte-h":!0}),r(l)!=="svelte-1eud6l3"&&(l.textContent=u),b=d(s),C=o(s,"P",{"data-svelte-h":!0}),r(C)!=="svelte-z30ra7"&&(C.textContent=cn),Q=d(s),O(h.$$.fragment,s),V=d(s),P=o(s,"P",{"data-svelte-h":!0}),r(P)!=="svelte-13kbc9n"&&(P.textContent=pn),F=d(s),S=o(s,"BLOCKQUOTE",{"data-svelte-h":!0}),r(S)!=="svelte-yqfhz4"&&(S.innerHTML=dn),G=d(s),w=o(s,"H2",{id:!0,"data-svelte-h":!0}),r(w)!=="svelte-pwsi1z"&&(w.innerHTML=rn),W=d(s),H=o(s,"P",{"data-svelte-h":!0}),r(H)!=="svelte-jhp29i"&&(H.innerHTML=vn),X=d(s),L=o(s,"BLOCKQUOTE",{"data-svelte-h":!0}),r(L)!=="svelte-jdk1jn"&&(L.innerHTML=un),Y=d(s),_=o(s,"H3",{id:!0,"data-svelte-h":!0}),r(_)!=="svelte-ir02sm"&&(_.innerHTML=fn),Z=d(s),M=o(s,"DIV",{class:!0});var q=T(M);O(g.$$.fragment,q),q.forEach(f),nn=d(s),$=o(s,"H2",{id:!0,"data-svelte-h":!0}),r($)!=="svelte-kig42"&&($.innerHTML=mn),sn=d(s),A=o(s,"P",{"data-svelte-h":!0}),r(A)!=="svelte-1i2071g"&&(A.innerHTML=kn),an=d(s),E=o(s,"P",{"data-svelte-h":!0}),r(E)!=="svelte-59nvjo"&&(E.textContent=bn),en=d(s),j=o(s,"P",{"data-svelte-h":!0}),r(j)!=="svelte-xznrkl"&&(j.innerHTML=hn),tn=d(s),x=o(s,"H3",{id:!0,"data-svelte-h":!0}),r(x)!=="svelte-ir02sm"&&(x.innerHTML=gn),on=d(s),U=o(s,"DIV",{class:!0});var D=T(U);O(y.$$.fragment,D),D.forEach(f),s.forEach(f),this.h()},h(){m(t,"id","enhancing-javascript-with-static-typing"),m(w,"id","duck-typing-and-structural-typing"),m(_,"id","example"),m(M,"class","code-block "),m($,"id","nominal-typing-with-symbols"),m(x,"id","example"),m(U,"class","code-block "),m(n,"slot","post_content")},m(c,s){K(c,n,s),a(n,t),a(n,v),a(n,l),a(n,b),a(n,C),a(n,Q),z(h,n,null),a(n,V),a(n,P),a(n,F),a(n,S),a(n,G),a(n,w),a(n,W),a(n,H),a(n,X),a(n,L),a(n,Y),a(n,_),a(n,Z),a(n,M),z(g,M,null),a(n,nn),a(n,$),a(n,sn),a(n,A),a(n,an),a(n,E),a(n,en),a(n,j),a(n,tn),a(n,x),a(n,on),a(n,U),z(y,U,null),I=!0},p(c,s){const q={};s&1&&(q.$$scope={dirty:s,ctx:c}),h.$set(q);const D={};s&1&&(D.$$scope={dirty:s,ctx:c}),g.$set(D);const yn={};s&1&&(yn.$$scope={dirty:s,ctx:c}),y.$set(yn)},i(c){I||(B(h.$$.fragment,c),B(g.$$.fragment,c),B(y.$$.fragment,c),I=!0)},o(c){R(h.$$.fragment,c),R(g.$$.fragment,c),R(y.$$.fragment,c),I=!1},d(c){c&&f(n),N(h),N(g),N(y)}}}function En(k){let n,t;return n=new Pn({props:{$$slots:{post_content:[An]},$$scope:{ctx:k}}}),{c(){J(n.$$.fragment)},l(e){O(n.$$.fragment,e)},m(e,v){z(n,e,v),t=!0},p(e,[v]){const l={};v&1&&(l.$$scope={dirty:v,ctx:e}),n.$set(l)},i(e){t||(B(n.$$.fragment,e),t=!0)},o(e){R(n.$$.fragment,e),t=!1},d(e){N(n,e)}}}class On extends Tn{constructor(n){super(),Cn(this,n,null,En,xn,{})}}export{On as component};
